{"version":3,"sources":["App.js","index.js"],"names":["App","state","name","message","winner","userMode","gameField","ameSet","leaderBoard","button","timer","this","getGameSettings","getLeaderBord","fetch","then","res","json","data","_this2","setState","gameSet","_this3","newName","mode","field","i","push","setRandomMove","fieldlength","_this4","checkWinner","_loop","randomKey","Math","floor","random","prewState","Object","toConsumableArray","Date","newGame","event","clickKey","target","dataset","set","time","delay","countGreen","countRed","length","winDate","toLocaleDateString","hour","minute","year","month","day","console","log","asyncToGenerator","regenerator_default","a","mark","_callee3","rawResponse","wrap","_context3","prev","next","method","headers","Accept","Content-Type","body","JSON","stringify","date","sent","stop","_this5","dataArrKey","key","react_default","createElement","className","onChange","setGameMode","value","map","item","type","setName","placeholder","onClick","onButtonClick","onMakeMove","Fragment","data-set","id","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.027d3dac.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    name:'',\n    message: '',\n    winner: null,\n    userMode:{},\n    gameField:[], ameSet:{},\n    leaderBoard:[],\n    button:'Play',\n    timer: null\n  };\n\n  componentDidMount() {\n    this.getGameSettings();\n    this.getLeaderBord();\n  }\n\n  async getGameSettings() {\n     await fetch('https://starnavi-frontend-test-task.herokuapp.com/game-settings')\n        .then(res => res.json())\n        .then(data => {\n          this.setState({\n            gameSet: data\n          })\n        });\n  }\n\n  async getLeaderBord(){\n    await fetch('https://starnavi-frontend-test-task.herokuapp.com/winners')\n        .then(res => res.json())\n        .then(data => {\n          this.setState({leaderBoard: data})\n        });\n  }\n\n  setName(newName){\n    this.setState({\n      name: newName\n    });\n  }\n\n setGameMode(mode) {\n    const field = this.state.gameSet[mode].field;\n    let gameField = [];\n    for (let i = 0; i < field*field; i++) {\n      gameField.push('');\n    }\n    this.setState( {\n      userMode: this.state.gameSet[mode],\n      gameField\n    });\n  }\n\n  newGame() {\n    const field = this.state.userMode.field;\n    let gameField = [];\n    for (let i = 0; i < field*field; i++) {\n      gameField.push('');\n    }\n    this.setState( {\n      gameField\n    });\n    this.setRandomMove(this.state.userMode.field * this.state.userMode.field);\n\n  }\n\n  setRandomMove(fieldlength) {\n     if ( this.checkWinner()) return;\n    for (let i = 0; i<(fieldlength); i++ ) {\n      const randomKey = Math.floor(Math.random() * fieldlength);\n      if (this.state.gameField[randomKey] === '') {\n        this.setState((prewState) => {\n          const gameField = [...prewState.gameField];\n          gameField[randomKey] = 'blue';\n          return {\n            gameField,\n            timer: new Date(),\n            message: prewState.name\n          }\n        });\n        break;\n      }\n    }\n  }\n\n  onButtonClick() {\n    this.setState({\n      button: 'Play Again',\n      message: 'Hello '+this.state.name,\n    });\n    this.newGame();\n  };\n\n  onMakeMove(event) {\n    const clickKey = event.target.dataset.set;\n    const time = new Date();\n\n    if ( this.state.winner !== null) {return;}\n\n    if (this.state.gameField[clickKey] !== 'blue') {return;}\n\n    if (time - this.state.timer < this.state.userMode.delay ) {\n      if (this.state.gameField[clickKey] === 'blue') {\n        this.setState((prewState) => {\n          const gameField = [...prewState.gameField];\n          gameField[clickKey] = 'green';\n          return {\n            gameField,\n            timer: null\n          }\n        });\n          this.setRandomMove(this.state.userMode.field * this.state.userMode.field);\n      }\n    }\n    else if (this.state.gameField[clickKey] === 'blue') {\n      this.setState((prewState) => {\n        const gameField = [...prewState.gameField];\n        gameField[clickKey] = 'red';\n        return {\n          gameField,\n          timer: null\n        }\n      });\n        this.setRandomMove(this.state.userMode.field * this.state.userMode.field);\n    }\n\n  }\n\n  checkWinner () {\n    let countGreen = 0;\n    let countRed = 0;\n    for (let i = 0; i < this.state.gameField.length; i++) {\n      if (this.state.gameField[i] !== '') {\n        if (this.state.gameField[i] === 'green') {countGreen++}\n        if (this.state.gameField[i] === 'red') {countRed++}\n      }\n    }\n\n    if (countRed + countGreen > this.state.gameField.length / 2) {\n      const winner =  (countGreen > countRed) ? this.state.name : 'Computer';\n      const date = new Date();\n      const options = {\n            hour: 'numeric',\n            minute: 'numeric',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n        };\n      const winDate = date.toLocaleDateString('en-US', options);\n      console.log(winDate);\n\n       (async () => {\n            const rawResponse = await fetch('https://starnavi-frontend-test-task.herokuapp.com/winners', {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({winner: winner, date:winDate})\n            });\n            const content = await rawResponse.json();\n        })();\n\n      this.setState( {\n          winner: winner\n      });\n       this.getLeaderBord();\n      return true;\n    }\n    return false;\n  }\n\n  render(){\n    let dataArrKey = [];\n    for (let key in this.state.gameSet) {\n      dataArrKey.push(key);\n    }\n    const field = this.state.userMode.field;\n    let message = (this.state.message === '')\n        ? 'Message here'\n        : 'Hello ' + this.state.message;\n    if (this.state.winner !== null) {\n      message = 'Winner ' + this.state.winner;\n    }\n\n    return (\n        <div className=\"App\">\n          <div>\n              <div className=\"prepare-game\">\n                  <select\n                      name=\"game-set\"\n                      onChange={(event) => this.setGameMode(event.target.value)}\n                  >\n                      <option value=\"start\">Pick game mode</option>\n                      {dataArrKey.map( item =>\n                          <option\n                              value={item}\n                              key={item}\n                          > {item} </option>\n                      )}\n                  </select>\n                  <input type=\"text\"\n                         value={this.state.name}\n                         onChange={(event) => this.setName(event.target.value)}\n                         placeholder=\"Enter your name\"/>\n                  <button onClick={ () => this.onButtonClick() }>\n                      {this.state.button}\n                  </button>\n              </div>\n              <div className=\"game-field\" >\n                  <p className=\"game-info\">{message}</p>\n                  <div onClick={(event) => this.onMakeMove(event)}>\n                      {this.state.gameField.map((item,key) => {\n                          return(\n                              <React.Fragment key={key*200} >\n                      <span\n                          key={key}\n                          className={item}\n                          data-set={key}>\n                      </span>\n                                  {((key+1) % field === 0) ? <br key={key*200}/> : ''}\n                              </React.Fragment>\n                          )})}\n                  </div>\n              </div>\n          </div>\n          <div>\n              <h2>Leader Bord</h2>\n            <div className=\"leader-item\">\n                {this.state.leaderBoard.map(item  => {\n                   return <div\n                        key={item.id}\n                   > <span>{item.winner}</span> <span>{item.date}</span> </div>\n                })}\n            </div>\n          </div>\n        </div>\n    );\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}